#+TITLE: Emacs Configuration
#+AUTHOR: Alfred Roos
#+PROPERTY: header-args:emacs-lisp :mkdirp yes
#+STARTUP: overview

* Table of Contents :TOC:
- [[#introduction][Introduction]]
- [[#installation][Installation]]
  - [[#auto-tangle-on-save][Auto-tangle on save]]
- [[#main-configuration-initel][Main Configuration (init.el)]]
- [[#package-management-lisppackagesel][Package Management (lisp/packages.el)]]
  - [[#package-setup][Package Setup]]
  - [[#version-control][Version Control]]
  - [[#completion-framework][Completion Framework]]
  - [[#project-management--navigation][Project Management & Navigation]]
  - [[#web-development][Web Development]]
  - [[#lsp--java-development][LSP & Java Development]]
  - [[#theme--visual][Theme & Visual]]
  - [[#editing-enhancements][Editing Enhancements]]
  - [[#javascripttypescript][JavaScript/TypeScript]]
  - [[#syntax-highlighting--editing][Syntax Highlighting & Editing]]
  - [[#file-management][File Management]]
  - [[#productivity--utilities][Productivity & Utilities]]
  - [[#window-management][Window Management]]
  - [[#enhanced-completion-ui][Enhanced Completion UI]]
  - [[#additional-utilities][Additional Utilities]]
- [[#keybindings-lispkeybindingsel][Keybindings (lisp/keybindings.el)]]
  - [[#project--navigation][Project & Navigation]]
  - [[#code-folding][Code Folding]]
  - [[#multiple-cursors][Multiple Cursors]]
  - [[#buffer-management][Buffer Management]]
  - [[#compilation][Compilation]]
  - [[#window-management-1][Window Management]]
  - [[#lsp][LSP]]
  - [[#dired][Dired]]
- [[#ui-configuration-lispuiel][UI Configuration (lisp/ui.el)]]
  - [[#basic-ui-settings][Basic UI Settings]]
  - [[#line-numbers--highlighting][Line Numbers & Highlighting]]
  - [[#indentation][Indentation]]
  - [[#yesno-prompts][Yes/No Prompts]]
  - [[#auto-save-configuration][Auto-save Configuration]]
  - [[#cursor-configuration][Cursor Configuration]]
  - [[#editing-modes][Editing Modes]]
  - [[#web-mode-settings][Web Mode Settings]]
  - [[#theme][Theme]]
  - [[#dired-settings][Dired Settings]]
  - [[#dashboard][Dashboard]]
  - [[#custom-functions][Custom Functions]]
- [[#tree-sitter-lisptreesitterel][Tree-sitter (lisp/treesitter.el)]]
- [[#notes][Notes]]

* Introduction

This is my literate Emacs configuration using Org mode. The configuration is organized into separate files for better modularity.

To use this configuration:
1. Clone or copy this =README.org= to your =~/.config/emacs/= directory
2. Run =M-x org-babel-tangle= or save this file to generate all config files
3. Restart Emacs
  
* Installation

** Auto-tangle on save

Add this to your existing init.el to auto-tangle this file on save:

#+begin_src emacs-lisp :tangle no
(defun my/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "README.org" user-emacs-directory))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)
      (message "Configuration tangled!"))))

(add-hook 'org-mode-hook
          (lambda ()
            (add-hook 'after-save-hook #'my/org-babel-tangle-config)))
#+end_src

* Main Configuration (init.el)

The main entry point that loads all other configuration modules.

#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el
;; Load custom Emacs Lisp files
(add-to-list 'load-path "/home/spy/.config/emacs/lisp")
(setq browse-url-browser-function 'browse-url-firefox)

;; Java Configuration
(setenv "JAVA_HOME" "/usr/lib/jvm/java-25-openjdk")
(setq exec-path (cons (concat (getenv "JAVA_HOME") "/bin") exec-path))

;; Disable auto-save files
(setq auto-save-default nil
      auto-save-list-file-prefix nil)

;; Disable backup files
(setq make-backup-files nil)

;; Disable lockfiles
(setq create-lockfiles nil)

;; Disable desktop save
(setq desktop-save nil)

;; LSP performance optimization
(setq gc-cons-threshold 100000000) ;; 100 MB

;; Load configuration modules
(load "packages")
(load "ui")
(load "keybindings")
(load "treesitter")
(load "secret")

;; Custom file configuration
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

* Package Management (lisp/packages.el)

All package declarations and configurations.

** Package Setup

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/packages.el
(require 'package)

;; Add package archives
(setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("gnu"   . "https://elpa.gnu.org/packages/")
        ("org"   . "https://orgmode.org/elpa/")))

;; Initialize the package system
(package-initialize)

;; Refresh package contents if needed
(unless package-archive-contents
  (package-refresh-contents))

;; Install use-package if not already installed
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

** Version Control

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/packages.el
(use-package magit
  :ensure t
  :defer t
  :bind (("C-x g" . magit-status)))
#+end_src

** Completion Framework

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/packages.el
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.5))

;; Enable Vertico
(use-package vertico
  :init
  (vertico-mode 1))

(use-package orderless
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

;; Persist history over Emacs restarts
(use-package savehist
  :init
  (savehist-mode 1))

;; Emacs minibuffer configurations
(setq enable-recursive-minibuffers t
      read-extended-command-predicate #'command-completion-default-include-p
      minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))

;; Optional: Enable context menu mode
(context-menu-mode 1)

(use-package consult
  :bind (("C-s" . consult-line)
         ("C-x b" . consult-buffer)
         ("M-y" . consult-yank-pop)))

(use-package embark
  :bind (("M-o" . embark-act)
         ("C-h B" . embark-bindings))
  :init (setq prefix-help-command #'embark-prefix-help-command))

(use-package expand-region
  :bind ("C-=" . er/expand-region))

(use-package embark-consult
  :after (embark consult)
  :hook (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Project Management & Navigation

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/packages.el
(use-package treemacs)
(use-package fold-this)
(use-package projectile)
#+end_src

** Web Development

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/packages.el
(use-package web-mode
  :ensure t
  :mode
  (("\\.phtml\\'" . web-mode)
   ("\\.php\\'" . web-mode)
   ("\\.ts\\'" . web-mode)
   ("\\.tsx\\'" . web-mode)
   ("\\.tpl\\'" . web-mode)
   ("\\.[agj]sp\\'" . web-mode)
   ("\\.as[cp]x\\'" . web-mode)
   ("\\.erb\\'" . web-mode)
   ("\\.mustache\\'" . web-mode)
   ("\\.djhtml\\'" . web-mode)))
#+end_src

** LSP & Java Development

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/packages.el
  (use-package lsp-mode
    :hook ((java-mode . lsp))
    :commands lsp
    :config
    (setq lsp-prefer-flymake nil   ;; Use flycheck instead of flymake
          lsp-enable-snippet t
          lsp-completion-provider :capf))

  (use-package lsp-ui
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-doc-enable t
          lsp-ui-sideline-enable t
          lsp-ui-sideline-show-code-actions t))

  (use-package lsp-treemacs
    :after lsp)

  (use-package company
    :hook ((java-mode . company-mode))
    :config
    (setq company-minimum-prefix-length 1
          company-idle-delay 0.0))

  (use-package dap-mode
    :after lsp-mode
    :config
    (dap-auto-configure-mode)
    ;; Enable java debugging support
    (require 'dap-java))

  ;; LSP Java
  (use-package lsp-java
    :after lsp
    :config
    (add-hook 'java-mode-hook #'lsp)
    ;; Optional: auto import
    (setq lsp-java-format-settings-url "https://raw.githubusercontent.com/google/styleguide/gh-pages/eclipse-java-google-style.xml"
          lsp-java-format-settings-profile "GoogleStyle"))

  (use-package java-snippets)
#+end_src

** Theme & Visual

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/packages.el
(use-package all-the-icons :if (display-graphic-p))

(use-package doom-themes
  :init
  (load-theme 'doom-one t))

(use-package doom-modeline
  :init
  (doom-modeline-mode 1)
  :custom
  ;; Optional tweaks
  (doom-modeline-height 25)
  (doom-modeline-bar-width 3)
  (doom-modeline-buffer-file-name-style 'truncate-with-project)
  (doom-modeline-minor-modes nil)
  (doom-modeline-indent-info t)
  (doom-modeline-icon t))  ;; requires all-the-icons package
#+end_src

** Editing Enhancements

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/packages.el
(use-package multiple-cursors)

(use-package eyebrowse)
(eyebrowse-mode)
#+end_src

** JavaScript/TypeScript

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/packages.el
(use-package jtsx
  :ensure t
  :mode (("\\.jsx?\\'" . jtsx-jsx-mode)
         ("\\.tsx\\'" . jtsx-tsx-mode)
         ("\\.ts\\'" . jtsx-typescript-mode))
  :commands jtsx-install-treesit-language
  :hook ((jtsx-jsx-mode . hs-minor-mode)
         (jtsx-tsx-mode . hs-minor-mode)
         (jtsx-typescript-mode . hs-minor-mode))
  :custom
  ;; Optional customizations
  (js-indent-level 4)
  ;; (typescript-ts-mode-indent-offset 2)
  ;; (jtsx-switch-indent-offset 0)
  ;; (jtsx-indent-statement-block-regarding-standalone-parent nil)
  ;; (jtsx-jsx-element-move-allow-step-out t)
  ;; (jtsx-enable-jsx-electric-closing-element t)
  ;; (jtsx-enable-electric-open-newline-between-jsx-element-tags t)
  ;; (jtsx-enable-jsx-element-tags-auto-sync nil)
  ;; (jtsx-enable-all-syntax-highlighting-features t)
  :config
  (defun jtsx-bind-keys-to-mode-map (mode-map)
    "Bind keys to MODE-MAP."
    (define-key mode-map (kbd "C-c C-j") 'jtsx-jump-jsx-element-tag-dwim)
    (define-key mode-map (kbd "C-c j o") 'jtsx-jump-jsx-opening-tag)
    (define-key mode-map (kbd "C-c j c") 'jtsx-jump-jsx-closing-tag)
    (define-key mode-map (kbd "C-c j r") 'jtsx-rename-jsx-element)
    (define-key mode-map (kbd "C-c <down>") 'jtsx-move-jsx-element-tag-forward)
    (define-key mode-map (kbd "C-c <up>") 'jtsx-move-jsx-element-tag-backward)
    (define-key mode-map (kbd "C-c C-<down>") 'jtsx-move-jsx-element-forward)
    (define-key mode-map (kbd "C-c C-<up>") 'jtsx-move-jsx-element-backward)
    (define-key mode-map (kbd "C-c C-S-<down>") 'jtsx-move-jsx-element-step-in-forward)
    (define-key mode-map (kbd "C-c C-S-<up>") 'jtsx-move-jsx-element-step-in-backward)
    (define-key mode-map (kbd "C-c j w") 'jtsx-wrap-in-jsx-element)
    (define-key mode-map (kbd "C-c j u") 'jtsx-unwrap-jsx)
    (define-key mode-map (kbd "C-c j d n") 'jtsx-delete-jsx-node)
    (define-key mode-map (kbd "C-c j d a") 'jtsx-delete-jsx-attribute)
    (define-key mode-map (kbd "C-c j t") 'jtsx-toggle-jsx-attributes-orientation)
    (define-key mode-map (kbd "C-c j h") 'jtsx-rearrange-jsx-attributes-horizontally)
    (define-key mode-map (kbd "C-c j v") 'jtsx-rearrange-jsx-attributes-vertically))
    
  (defun jtsx-bind-keys-to-jtsx-jsx-mode-map ()
      (jtsx-bind-keys-to-mode-map jtsx-jsx-mode-map))

  (defun jtsx-bind-keys-to-jtsx-tsx-mode-map ()
      (jtsx-bind-keys-to-mode-map jtsx-tsx-mode-map))

  (add-hook 'jtsx-jsx-mode-hook 'jtsx-bind-keys-to-jtsx-jsx-mode-map)
  (add-hook 'jtsx-tsx-mode-hook 'jtsx-bind-keys-to-jtsx-tsx-mode-map))
#+end_src

** Syntax Highlighting & Editing

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/packages.el
(use-package rainbow-delimiters)
(use-package smartparens)
(use-package kdl-mode)
#+end_src

** File Management

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/packages.el
(use-package diredfl
  :hook (dired-mode . diredfl-mode))
#+end_src

** Productivity & Utilities

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/packages.el
(use-package wakatime-mode)
(global-wakatime-mode 1)
#+end_src

** Window Management

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/packages.el
(use-package shackle)
(setq shackle-rules
      '((compilation-mode :align bottom :size 0.25 :select f)
        (grep-mode        :align bottom :size 0.25 :select f)
        (help-mode        :align right  :size 0.4 :select f)
        (Man-mode         :align right  :size 0.5 :select f)))
(shackle-mode 1)
(setq compilation-scroll-output 'first-error
      compilation-ask-about-save nil
      compilation-auto-jump-to-first-error t)
#+end_src

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/ui.el

(defun my/split-window-right-and-focus ()
  "Split the window vertically and move focus to the new one."
  (interactive)
  (split-window-right)
  (other-window 1))

(defun my/split-window-below-and-focus ()
  "Split the window vertically and move focus to the new one."
  (interactive)
  (split-window-below)
  (other-window 1))


#+end_src

** Enhanced Completion UI

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/packages.el
;; adds a frame in the middle where we use vertico
(use-package posframe
  :ensure t)

(use-package vertico-posframe
  :after vertico posframe
  :ensure t
  :custom
  (vertico-posframe-width 120)
  (vertico-posframe-min-width 50)
  (vertico-posframe-parameters '((left-fringe . 8) (right-fringe . 8)))
  :init
  (vertico-posframe-mode 1))

(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
#+end_src

** Additional Utilities

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/packages.el
(use-package ace-window)
(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
(use-package all-the-icons)
(use-package all-the-icons-ibuffer)

;;(use-package eglot
;;  :ensure t
;;  :hook (java-mode . eglot-ensure)
;;  :config
;;  ;; point to the Eclipse JDT Language Server if needed
;;  (add-to-list 'eglot-server-programs
;;               '(java-mode . ("jdtls"))))

(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))

(use-package jetbrains-darcula-theme)
(use-package pyvenv)
(use-package fancy-compilation)
#+end_src

* Keybindings (lisp/keybindings.el)

All custom keybindings organized by category.

** Project & Navigation

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/keybindings.el
;; Treemacs
(global-set-key [f8] 'treemacs)
(global-set-key (kbd "C-c o p") 'treemacs)

;; Projectile
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src

** Code Folding

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/keybindings.el
;; fold this
(global-set-key (kbd "C-c C-f") 'fold-this-all)
(global-set-key (kbd "C-c C-F") 'fold-this)
(global-set-key (kbd "C-c M-f") 'fold-this-unfold-all)
#+end_src

** Multiple Cursors

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/keybindings.el
;; multiple cursor
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(define-key key-translation-map (kbd "M-S-d") (kbd "M-D"))
(global-set-key (kbd "M-D") 'mc/mark-next-like-this-word)
#+end_src

** Buffer Management

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/keybindings.el
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "C-x 3") #'my/split-window-right-and-focus)
(global-set-key (kbd "C-x 2") #'my/split-window-below-and-focus)
#+end_src

** Compilation

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/keybindings.el
;;compile
(global-set-key (kbd "C-c c c") 'compile)
(global-set-key (kbd "C-c c C") 'recompile)
(global-set-key (kbd "C-c p c c") 'projectile-compile-project)
(global-set-key [f10] 'recompile)
#+end_src

Makes so the cursor doesnt go to compile buffre
#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/ui.el
(setq compilation-finish-functions
      (lambda (buf msg)
        (when (string-match ".*finished" msg)
          (message "Compilation finished successfully."))))

(setq display-buffer-alist
      '(("\\*compilation\\*"
         (display-buffer-reuse-window display-buffer-at-bottom)
         (window-height . 0.3)
         (inhibit-same-window . t))))
#+end_src

** Window Management

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/keybindings.el
;; ace-window
(global-set-key (kbd "C-x o") 'ace-window)
#+end_src

** LSP

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/keybindings.el
;;lsp
(global-set-key (kbd "C-c c d") 'lsp-goto-type-definition)
#+end_src

** Org mode
#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/keybindings.el
(keymap-set emacs-lisp-mode-map "C-c r" 'eval-buffer)
#+end_src

** Yassnipet
#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/packages.el
(use-package yasnippet)
(yas-global-mode 1)
#+end_src
** Dired

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/keybindings.el
(add-hook 'dired-mode-hook
          (lambda ()
            (define-key dired-mode-map [mouse-1] 'dired-find-alternate-file)))

(put 'dired-find-alternate-file 'disabled nil)

#+end_src

** ETC
#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/keybindings.el
(global-set-key (kbd "C-h l") 'load-theme)

(defun rc/duplicate-line ()
  "Duplicate current line"
  (interactive)
  (let ((column (- (point) (point-at-bol)))
        (line (let ((s (thing-at-point 'line t)))
                (if s (string-remove-suffix "\n" s) ""))))
    (move-end-of-line 1)
    (newline)
    (insert line)
    (move-beginning-of-line 1)
    (forward-char column)))


(global-set-key (kbd "C-.") 'rc/duplicate-line)
#+end_src

* UI Configuration (lisp/ui.el)

Visual and interface settings.

** Basic UI Settings
#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/packages.el
  (use-package mlscroll)
  (use-package good-scroll)
#+end_src

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/ui.el
(setq inhibit-startup-message t  ; Don't show the splash screen
      visible-bell t)            ; Flash when the bell rings

;; Disable unnecessary UI elements
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(mlscroll-mode)
(good-scroll-mode)

(add-to-list 'default-frame-alist '(font . "Iosevka" ))
(set-face-attribute 'default t :font "Iosevka" :weight 'semi-bold )
#+end_src

** Org mode
#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/ui.el
;; Modern Org Mode Configuration
;; A sleek, feature-rich setup for Org mode

;; ============================================================================
;; CORE ORG SETTINGS
;; ============================================================================

(use-package org
  :ensure nil
  :custom
  ;; Directories
  (org-directory "~/org/")
  (org-default-notes-file (concat org-directory "inbox.org"))
  
  ;; Visual settings
  (org-startup-indented t)
  (org-pretty-entities t)
  (org-hide-emphasis-markers t)
  (org-startup-with-inline-images t)
  (org-image-actual-width '(300))
  
  ;; Behavior
  (org-edit-src-content-indentation 0)
  (org-src-tab-acts-natively t)
  (org-src-preserve-indentation t)
  (org-return-follows-link t)
  (org-confirm-babel-evaluate nil)
  
  ;; Todo keywords
  (org-todo-keywords
   '((sequence "TODO(t)" "NEXT(n)" "PROG(p)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELLED(c@)")))
  
  (org-todo-keyword-faces
   '(("TODO" . (:foreground "#ff6c6b" :weight bold))
     ("NEXT" . (:foreground "#51afef" :weight bold))
     ("PROG" . (:foreground "#c678dd" :weight bold))
     ("WAIT" . (:foreground "#ecbe7b" :weight bold))
     ("DONE" . (:foreground "#98be65" :weight bold))
     ("CANCELLED" . (:foreground "#5b6268" :weight bold))))
  
  ;; Agenda
  (org-agenda-files (list org-directory))
  (org-agenda-start-with-log-mode t)
  (org-log-done 'time)
  (org-log-into-drawer t)
  
  ;; Tags
  (org-tag-alist
   '((:startgroup)
     ("@work" . ?w)
     ("@home" . ?h)
     ("@errands" . ?e)
     (:endgroup)
     ("planning" . ?p)
     ("review" . ?r)
     ("note" . ?n)))
  
  ;; Capture templates
  (org-capture-templates
   '(("t" "Todo" entry (file+headline org-default-notes-file "Tasks")
      "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
     ("m" "Meeting" entry (file+headline org-default-notes-file "Meetings")
      "* %? :meeting:\n  %U" :empty-lines 1)
     ("n" "Note" entry (file+headline org-default-notes-file "Notes")
      "* %?\n  %U\n  %i" :empty-lines 1)
     ("j" "Journal" entry (file+datetree "~/org/journal.org")
      "* %?\n  Entered on %U\n  %i" :empty-lines 1)))
  
  :bind
  (("C-c o l" . org-store-link)
   ("C-c o a" . org-agenda)
   ("C-c o c" . org-capture)
   :map org-mode-map
   ("C-c C-q" . counsel-org-tag))
  
  :hook
  (org-mode . visual-line-mode)
  (org-mode . variable-pitch-mode))

;; Redisplay images after execution
(setq org-redisplay-inline-images t)
;; Or use a list for different sizes
(setq org-image-actual-width '(300 500 800))
(setq org-yank-image-save-method 'attach)
(setq org-yank-image-save-method "images/")

;; ============================================================================
;; MODERN BULLETS
;; ============================================================================

(use-package org-modern
  :ensure t
  :hook (org-mode . org-modern-mode)
  :custom
  (org-modern-star '("◉" "○" "✸" "✿" "✤" "✜" "◆" "▶"))
  (org-modern-table-vertical 1)
  (org-modern-table-horizontal 0.2)
  (org-modern-list '((43 . "➤") (45 . "–") (42 . "•")))
  (org-modern-todo-faces
   '(("TODO" :inverse-video t :inherit org-todo)
     ("PROG" :inverse-video t :inherit +org-todo-active)
     ("WAIT" :inverse-video t :inherit +org-todo-onhold)
     ("DONE" :inverse-video t :inherit org-done)))
  (org-modern-footnote (cons nil (cadr org-script-display)))
  (org-modern-block-fringe nil)
  (org-modern-block-name '("" . ""))
  (org-modern-keyword nil)
  (org-modern-timestamp t)
  (org-modern-priority t))

;; ============================================================================
;; ELEGANT FONTS
;; ============================================================================

(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.4 :weight bold))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.3 :weight semi-bold))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.2 :weight semi-bold))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.1 :weight semi-bold))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
 '(org-document-title ((t (:height 2.0 :weight bold :underline nil))))
 '(variable-pitch ((t (:family "ETBembo" :height 180 :weight normal))))
 '(fixed-pitch ((t (:family "JetBrains Mono" :height 140)))))

;; Fix mixed pitch for specific elements
;;(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
;;(set-face-attribute 'org-table nil :inherit 'fixed-pitch)
;;(set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
;;(set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
;;(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
;;(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
;;(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
;;(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

;; ============================================================================
;; BABEL LANGUAGES
;; ============================================================================

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (shell . t)
   (js . t)
   (sql . t)))

;; ============================================================================
;; MODERN AGENDA VIEW
;; ============================================================================

(setq org-agenda-custom-commands
      '(("d" "Dashboard"
         ((agenda "" ((org-agenda-span 7)
                      (org-agenda-start-day "-1d")
                      (org-deadline-warning-days 7)))
          (todo "NEXT"
                ((org-agenda-overriding-header "Next Actions")))
          (todo "PROG"
                ((org-agenda-overriding-header "In Progress")))
          (todo "WAIT"
                ((org-agenda-overriding-header "Waiting On")))))
        
        ("n" "Next Tasks"
         ((todo "NEXT"
                ((org-agenda-overriding-header "Next Tasks")))))
        
        ("w" "Work"
         ((tags-todo "@work"
                     ((org-agenda-overriding-header "Work Tasks")))))))

;; ============================================================================
;; SUPER AGENDA (OPTIONAL - REQUIRES INSTALLATION)
;; ============================================================================

(use-package org-super-agenda
  :ensure t
  :after org-agenda
  :config
  (org-super-agenda-mode)
  :custom
  (org-super-agenda-groups
   '((:name "Today"
      :time-grid t
      :scheduled today)
     (:name "High Priority"
      :priority "A")
     (:name "In Progress"
      :todo "PROG")
     (:name "Next Actions"
      :todo "NEXT")
     (:name "Waiting"
      :todo "WAIT")
     (:name "Projects"
      :tag "project"))))

;; ============================================================================
;; EXPORT SETTINGS
;; ============================================================================

(setq org-export-with-smart-quotes t
      org-export-with-toc nil
      org-html-validation-link nil
      org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted")))

;; ============================================================================
;; KEYBINDINGS
;; ============================================================================

(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-c C-x C-r") 'org-clock-report)
  (define-key org-mode-map (kbd "C-c C-x C-o") 'org-clock-out)
  (define-key org-mode-map (kbd "C-c C-x C-i") 'org-clock-in))

(provide 'org-config)
#+end_src
** Line Numbers & Highlighting

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/ui.el
(setq display-line-numbers 'relative)
(global-display-line-numbers-mode 1)
(global-hl-line-mode +1)          ;; highlight current line
#+end_src

** Indentation

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/ui.el
;;(setq-default indent-tabs-mode nil) ;; use spaces hehe
;;(setq-default tab-width 4)
(setq-default indent-tabs-mode t)
(setq-default tab-width 2) ; Assuming you want your tabs to be two spaces wide
#+end_src

** Yes/No Prompt


s

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/ui.el
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Auto-save Configuration

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/ui.el
(setq auto-save-default nil)
;; Optional: Change auto-save file location (to avoid clutter)
(setq auto-save-file-name-transforms
      `((".*" ,(expand-file-name "~/.config/emacs/auto-saves/") t)))
#+end_src

** Cursor Configuration

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/ui.el
(setq-default cursor-type 'bar)  ; Slim vertical bar cursor
(blink-cursor-mode 1)
(setq cursor-in-non-selected-windows nil)
#+end_src

** Editing Modes

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/ui.el
(smartparens-global-mode t)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
(delete-selection-mode 1)
#+end_src

** Web Mode Settings

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/ui.el
;; Enable automatic closing of tags
(setq web-mode-enable-auto-closing t)
;; Enable automatic pair insertion (like <div></div>)
(setq web-mode-enable-auto-pairing t)
#+end_src

** Theme

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/ui.el
(setq custom-safe-themes t)
(load-theme 'doom-dark+)
#+end_src

** Dired Settings

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/ui.el
;; dired
(setq dired-listing-switches "-lah --group-directories-first")
#+end_src

** Dashboard

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/ui.el
(setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
(setq dashboard-center-content t)
;;(setq dashboard-startup-banner "~/Pictures/basta.png")
(setq dashboard-startup-banner "~/.config/emacs/banner.txt")
(setq dashboard-vertically-center-content t)
(dashboard-open)

#+end_src

** Custom Functions

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/ui.el
(defun jetbrains ()
  "Starts jetbrains style"
  (interactive)
  (load-theme 'jetbrains-darcula t)
  (projectile-switch-project)
  (treemacs))
#+end_src

* Tree-sitter (lisp/treesitter.el)

Tree-sitter configuration (file needs to be created if you have one).

#+begin_src emacs-lisp :tangle ~/.config/emacs/lisp/treesitter.el
;; Add your tree-sitter configuration here
;; This file is loaded but you haven't provided its contents
;; Example:
;; (setq treesit-language-source-alist
;;       '((bash "https://github.com/tree-sitter/tree-sitter-bash")
;;         (python "https://github.com/tree-sitter/tree-sitter-python")))
#+end_src

* Notes

# - The ~lisp/secret.el~ file is loaded but not included here (for security reasons)
- Make sure to run ~M-x all-the-icons-install-fonts~ after first setup
- For LSP Java, ensure you have a Java language server installed
- Run ~M-x jtsx-install-treesit-language~ to install tree-sitter grammars for JavaScript/TypeScript


